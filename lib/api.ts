import { getBaseUrl } from './config'
console.log('üõ∞ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É:', getBaseUrl()) // –ª–æ–≥ —Å –∞–¥—Ä–µ—Å–æ–º
import {
  Car,
  Driver,
  TripRoutePoint,
  EndTripRequest,
  EndTripResponse,
} from './types'

// ‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç –ø–æ–µ–∑–¥–∫–∏
export async function startTrip(userId: number): Promise<number> {
  const res = await fetch(`${getBaseUrl()}/api/trip/start`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ user_id: userId }),
  })

  const json = await res.json()
  return json.trip_id
}

// üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏
export async function endTrip(
  tripId: number,
  duration: number,
  distance: number
): Promise<EndTripResponse> {
  const res = await fetch(`${getBaseUrl()}/api/trip/end`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ trip_id: tripId, duration, distance } as EndTripRequest),
  })

  return await res.json()
}

// üìç –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
export async function sendLocation(
  userId: number,
  tripId: number,
  latitude: number,
  longitude: number
): Promise<void> {
  await fetch(`${getBaseUrl()}/api/location`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ user_id: userId, trip_id: tripId, latitude, longitude }),
  })
}

// üõ£ –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
export async function getTripRoute(tripId: number): Promise<TripRoutePoint[]> {
  const res = await fetch(`${getBaseUrl()}/api/trip/${tripId}/route`)
  const json = await res.json()
  return json.route
}

// üë• –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π
export async function getDrivers(): Promise<Driver[]> {
  const res = await fetch(`${getBaseUrl()}/api/drivers`)
  const json = await res.json()
  return json.drivers
}

// üöó –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—à–∏–Ω
export async function getCars(): Promise<Car[]> {
  const res = await fetch(`${getBaseUrl()}/api/cars`)
  const json = await res.json()
  return json.cars
}

// ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã
export async function createCar(form: FormData): Promise<void> {
  await fetch(`${getBaseUrl()}/api/car`, {
    method: 'POST',
    body: form,
  })
}

// ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã
export async function updateCar(id: number, form: FormData): Promise<void> {
  await fetch(`${getBaseUrl()}/api/car/${id}`, {
    method: 'PUT',
    body: form,
  })
}

// ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è
export async function createDriver(form: FormData): Promise<void> {
  await fetch(`${getBaseUrl()}/api/driver`, {
    method: 'POST',
    body: form,
  })
}

// ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã
export async function deleteCar(id: number): Promise<void> {
  await fetch(`${getBaseUrl()}/api/car/${id}`, {
    method: 'DELETE',
  })
}

// ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è
export async function deleteDriver(id: number): Promise<void> {
  await fetch(`${getBaseUrl()}/api/driver/${id}`, {
    method: 'DELETE',
  })
}

// üîó –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–∞—à–∏–Ω—ã –≤–æ–¥–∏—Ç–µ–ª—é
export async function assignCarsToDriver(driverId: number, carIds: number[]): Promise<void> {
  await fetch(`${getBaseUrl()}/api/assign-car`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ driver_id: driverId, car_ids: carIds }),
  })
}

// üìç –ê–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–∏ (–¥–ª—è –∫–∞—Ä—Ç—ã)
export async function getActiveDrivers(): Promise<Driver[]> {
  const res = await fetch(`${getBaseUrl()}/api/active-drivers`)
  const json = await res.json()
  return json.drivers
}
